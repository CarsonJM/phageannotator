/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Config file for defining DSL2 per module options and publishing paths
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Available keys to override module options:
        ext.args   = Additional arguments appended to command in module.
        ext.args2  = Second set of arguments appended to command in module (multi-tool modules).
        ext.args3  = Third set of arguments appended to command in module (multi-tool modules).
        ext.prefix = File name prefix for output files.
----------------------------------------------------------------------------------------
*/

process {

    publishDir = [
        path: { "${params.outdir}/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
        mode: params.publish_dir_mode,
        saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
    ]

    withName: FASTQC {
        publishDir = [
                path: { "${params.outdir}/ReadQuality/fastqc" },
                mode: params.publish_dir_mode,
                pattern: '*.html',
        ]
    }

    withName: SEQKIT_SEQ {
        ext.args = params.assembly_min_length ? "--min-len ${params.assembly_min_length}" : ""
        publishDir = [
                path: { "${params.outdir}/AssemblyFilter/seqkit/seq" },
                mode: params.publish_dir_mode,
                pattern: '*.fast*',
        ]
    }

    withName: MASH_SKETCH_ASSEMBLIES {
        ext.args = '-i'
        publishDir = [
                enabled: false
        ]
    }

    withName: MASH_SKETCH_REFERENCES {
        ext.args = '-i'
        publishDir = [
                path: { "${params.outdir}/ReferenceContainment/mash/sketch" },
                mode: params.publish_dir_mode,
                pattern: '*.msh',
        ]
    }

    withName: MASH_PASTE{
        publishDir = [
                enabled: false
        ]
    }

    withName: MASH_SCREEN {
        ext.args = params.mash_screen_min_score ? "-i ${params.mash_screen_min_score}" : ""
        publishDir = [
                path: { "${params.outdir}/ReferenceContainment/mash/screen" },
                mode: params.publish_dir_mode,
                pattern: '*.screen',
        ]
    }

    withName: APPEND_SCREEN_HITS {
        publishDir = [
                path: { "${params.outdir}/ReferenceContainment/append_screen_hits" },
                mode: params.publish_dir_mode,
                pattern: '*.fna.gz',
        ]
    }

    withName: CAT_MASH_SCREEN {
        publishDir = [
                path: { "${params.outdir}/ReferenceContainment" },
                mode: params.publish_dir_mode,
                pattern: '*.screen',
        ]
    }

    withName: GENOMAD_DOWNLOAD {
        publishDir = [
                path: { "${params.outdir}/VirusClassification/genomad" },
                mode: params.publish_dir_mode,
                pattern: 'genomad_db',
        ]
    }

    withName: GENOMAD_ENDTOEND {
        ext.args   = [
            params.genomad_min_score ? "--min-score ${params.genomad_min_score}" : "",
            params.genomad_max_fdr ? "--enable-score-calibration --max-fdr ${params.genomad_max_fdr}" : "",
            params.genomad_splits ? "--splits ${params.genomad_splits}" : ""
        ].join(' ').trim()
        publishDir = [
                path: { "${params.outdir}/VirusClassification/genomad/endtoend" },
                mode: params.publish_dir_mode,
                pattern: '*_summary/*_virus.fna.gz',
        ]
        publishDir = [
                path: { "${params.outdir}/VirusClassification/genomad/endtoend" },
                mode: params.publish_dir_mode,
                pattern: '*_summary/*_virus_summary.tsv',
        ]
    }

    withName: AWK {
        ext.args = "'FNR>1 || NR==1'"
        publishDir = [
                path: { "${params.outdir}/VirusClassification" },
                mode: params.publish_dir_mode,
                pattern: 'genomad_db',
        ]
    }

    withName: CUSTOM_DUMPSOFTWAREVERSIONS {
        publishDir = [
            path: { "${params.outdir}/pipeline_info" },
            mode: params.publish_dir_mode,
            pattern: '*_versions.yml'
        ]
    }

}
