nextflow_workflow {

    name "Test Subworkflow: FASTQ_FASTA_REFERENCE_CONTAINMENT_MASH"
    script "subworkflows/local/fastq_fasta_reference_containment_mash/main.nf"
    workflow "FASTQ_FASTA_REFERENCE_CONTAINMENT_MASH"
    tag "subworkflows_local"
    tag "fastq_fasta_reference_containment_mash"
    tag "full_fastq_fasta_reference_containment_mash"


    test("Test full fastq_fasta_reference_containment_mash subworkflow") {

        when {
            params {
                outdir                  = "$outputDir"

            }
            workflow {
                """
                input[0] = Channel.of([ [ id:'test' ], [ file('https://github.com/nf-core/test-datasets/raw/modules/data/genomics/prokaryotes/bacteroides_fragilis/illumina/fastq/test1_1.fastq.gz', checkIfExists: true), file('https://github.com/nf-core/test-datasets/raw/modules/data/genomics/prokaryotes/bacteroides_fragilis/illumina/fastq/test1_2.fastq.gz', checkIfExists: true) ] ])
                input[1] = Channel.of([ [ id:'test' ], [ file('https://github.com/nf-core/test-datasets/raw/modules/data/genomics/prokaryotes/bacteroides_fragilis/genome/genome.fna.gz', checkIfExists: true) ] ])
                """
            }
        }

        then {
            assertAll(
                { assert workflow.success },
                { assert workflow.trace.succeeded().size() == 6 },
                { assert snapshot(path("$outputDir/ReferenceIdentification")).match("full_fastq_fasta_reference_containment_mash") }
            )
        }
    }
}
