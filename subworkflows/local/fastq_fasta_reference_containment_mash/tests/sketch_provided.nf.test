nextflow_workflow {

    name "Test subworkflow: FASTQ_FASTA_REFERENCE_CONTAINMENT_MASH"
    script "subworkflows/local/fastq_fasta_reference_containment_mash/main.nf"
    workflow "FASTQ_FASTA_REFERENCE_CONTAINMENT_MASH"
    tag "subworkflows"
    tag "subworkflows_local"
    tag "fastq_fasta_reference_containment_mash"
    tag "fastq_fasta_reference_containment_mash_sketch_provided"


    test("Mash sketch provided") {

        when {
            params {
                outdir                  = "$outputDir"
                reference_virus_fasta   = 'https://github.com/nf-core/test-datasets/raw/modules/data/genomics/prokaryotes/bacteroides_fragilis/illumina/fasta/test1.contigs.fa.gz'
                reference_virus_sketch  = 'https://github.com/nf-core/test-datasets/raw/phageannotator/modules/local/mash/paste/bacteroides_fragilis_contigs1.msh'
            }
            workflow {
                """
                input[0] = Channel.of([ [ id:'test' ], [ file('https://github.com/nf-core/test-datasets/raw/modules/data/genomics/prokaryotes/bacteroides_fragilis/illumina/fastq/test1_1.fastq.gz', checkIfExists:true), file('https://github.com/nf-core/test-datasets/raw/modules/data/genomics/prokaryotes/bacteroides_fragilis/illumina/fastq/test1_2.fastq.gz', checkIfExists: true) ] ])
                input[1] = Channel.of([ [ id:'test' ], [ file('https://github.com/nf-core/test-datasets/raw/modules/data/genomics/prokaryotes/bacteroides_fragilis/genome/genome.fna.gz', checkIfExists:true) ] ])
                input[2] = Channel.of([ [ id:'reference_viruses' ], [ file('https://github.com/nf-core/test-datasets/raw/modules/data/genomics/prokaryotes/bacteroides_fragilis/illumina/fasta/test1.contigs.fa.gz', checkIfExists:true) ] ])
                input[3] = Channel.of([ [ id:'reference_viruses' ], [ file('https://github.com/nf-core/test-datasets/raw/phageannotator/modules/local/mash/paste/bacteroides_fragilis_contigs1.msh', checkIfExists:true) ] ])
                """
            }

        then {
            assertAll(
                { assert workflow.success },
                { assert workflow.trace.succeeded().size() == 3 },
                { assert snapshot(path("$outputDir/ReferenceContainment")).match("full_fastq_fasta_reference_containment_mash") }
                )
            }
        }
    }
}
