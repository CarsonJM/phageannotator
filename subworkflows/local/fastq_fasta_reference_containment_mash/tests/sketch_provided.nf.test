nextflow_workflow {

    name "Test subworkflow: FASTQ_FASTA_REFERENCE_CONTAINMENT_MASH"
    script "subworkflows/local/fastq_fasta_reference_containment_mash/main.nf"
    workflow "FASTQ_FASTA_REFERENCE_CONTAINMENT_MASH"

    // Depencies
    tag "MASH_SKETCH"
    tag "MASH_PASTE"
    tag "MASH_SCREEN"

    test("fastq.gz & fasta.gz & sketch.msh") {

        when {
            params {
                outdir                  = "$outputDir"
                reference_virus_fasta   = "$params.test_data['bacteroides_fragilis']['illumina']['test1_contigs_fa_gz']"
                reference_virus_sketch  = "$params.test_data['modules_local']['mash_sketch1_msh']"
            }
            workflow {
                """
                input[0] = Channel.of(
                    [
                        [ id:'test' ],
                        [
                            file(params.modules_testdata_base_path + 'genomics/prokaryotes/bacteroides_fragilis/illumina/fastq/test1_1.fastq.gz', checkIfExists:true),
                            file(params.modules_testdata_base_path + 'genomics/prokaryotes/bacteroides_fragilis/illumina/fastq/test1_2.fastq.gz', checkIfExists: true)
                        ]
                    ],
                    [
                        [ id:'test2' ],
                        [
                            file(params.modules_testdata_base_path + 'genomics/prokaryotes/bacteroides_fragilis/illumina/fastq/test2_1.fastq.gz', checkIfExists:true),
                            file(params.modules_testdata_base_path + 'genomics/prokaryotes/bacteroides_fragilis/illumina/fastq/test2_2.fastq.gz', checkIfExists: true)
                        ]
                    ]
                )
                input[1] = Channel.of(
                    [
                        [ id:'test' ],
                        file(params.modules_testdata_base_path + 'genomics/prokaryotes/bacteroides_fragilis/genome/genome.fna.gz', checkIfExists:true)\
                    ],
                    [
                        [ id:'test2' ],
                        file(params.modules_testdata_base_path + 'genomics/prokaryotes/bacteroides_fragilis/genome/genome.fna.gz', checkIfExists:true)
                    ]
                )
                input[2] = Channel.of(
                    [
                        [ id:'reference_viruses' ],
                        file(params.modules_testdata_base_path + 'genomics/prokaryotes/bacteroides_fragilis/illumina/fasta/test1.contigs.fa.gz', checkIfExists:true)
                    ]
                )
                input[3] = Channel.of(
                    [
                        [ id:'reference_viruses' ],
                        file(params.pipelines_testdata_base_path + 'modules/local/mash/paste/bacteroides_fragilis_contigs1.msh', checkIfExists:true)
                    ]
                )
                """
            }

        then {
            assertAll(
                { assert workflow.success },
                { assert snapshot(workflow.out).match() }
                )
            }
        }
    }
}
