nextflow_pipeline {

    name "Test Workflow main.nf"
    script "main.nf"
    tag "workflows"
    tag "phageannotator_full"


    test("Full phageannotator test") {

        when {
            params {
                outdir = "$outputDir"
                reference_id_fasta  = 'https://github.com/nf-core/test-datasets/raw/modules/data/genomics/prokaryotes/bacteroides_fragilis/genome/genome.fna.gz'
            }
        }

        then {
            assertAll(
                { assert workflow.success },
                { assert snapshot(NftestUtils.removeNextflowVersion("$outputDir")).match("software_versions") },
                { assert snapshot(path("$outputDir/ReferenceIdentification/mash/sketch/reference_fasta.msh")).match("mash_sketch") },
                { assert snapshot(path("$outputDir/ReferenceIdentification/mash/screen/reference_fasta.screen")).match("mash_screen") },
                { assert snapshot(path("$outputDir/ReferenceIdentification/append_screen_hits/test1.fasta_w_screen_hits.fna.gz")).match("append_screen_hits") },
                { assert snapshot(path("$outputDir/DeNovoIdentification/genomad/genomad_db/").list()).match("genomad_download") },
                { assert snapshot(path("$outputDir/DeNovoIdentification/genomad/endtoend/").list()).match("genomad_end_to_end") },
                { assert new File("$outputDir/fastqc/test1_1_fastqc.html").exists() },
                { assert new File("$outputDir/fastqc/test1_2_fastqc.html").exists() },
                { assert snapshot(path("$outputDir/multiqc/multiqc_data/multiqc_fastqc.txt"),
                                path("$outputDir/multiqc/multiqc_data/multiqc_general_stats.txt")).match("multiqc") },
            )
        }

    }

}
